---
# milestone 2 - Installing Drupal
# --volume: {{ DRUPAL_HOME }}
# --volume: {{ DRUPAL_HOME }}/sites/default

- name: Set MySQL root password before installing
  debconf:
    name: 'mysql-server'
    question: 'mysql-server/root_password'
    value: '{{ MYSQL_ROOT_PASSWORD | quote }}'
    vtype: 'password'

- name: Confirm MySQL root password before installing
  debconf:
    name: 'mysql-server'
    question: 'mysql-server/root_password_again'
    value: '{{ MYSQL_ROOT_PASSWORD | quote }}'
    vtype: 'password'

- name: Install the "LAMP" stack
  apt:
    pkg: "{{ item }}"
    state: present
    update_cache: true
    cache_valid_time: 86400
  with_items:
    - apache2
    - apache2-bin
    - apache2-data
    - apache2-mpm-prefork
    - libaio1
    - libapr1
    - libaprutil1
    - libaprutil1-dbd-sqlite3
    - libaprutil1-ldap
    - libdbd-mysql-perl
    - libdbi-perl
    - libhtml-template-perl
    - libterm-readkey-perl
    - libwrap0
    - libdbi-perl
    - libapache2-mod-php5
    - libmysqlclient18
    - mysql-client-5.5
    - mysql-client-core-5.5
    - mysql-common
    - mysql-server
    - mysql-server-5.5
    - mysql-server-core-5.5
    - php5-cli
    - php5-common
    - php5-json
    - php5-mysql
    - php5-readline
    - ssl-cert
    - tcpd
  when: ansible_distribution_release == "trusty"

- name: Install the "LAMP" stack
  apt:
    pkg: "{{ item }}"
    state: present
    update_cache: true
    cache_valid_time: 86400
  with_items:
    - apache2
    - apache2-bin
    - apache2-data
    - apache2-utils
    - libapache2-mod-php
    - libapache2-mod-php7.0
    - libapr1
    - libaprutil1
    - libaprutil1-dbd-sqlite3
    - libaprutil1-ldap
    - libicu55
    - liblua5.1-0
    - libxml2
    - php-common
    - php-mysql
    - php7.0-cli
    - php7.0-common
    - php7.0-json
    - php7.0-mysql
    - php7.0-opcache
    - php7.0-readline
    - sgml-base
    - ssl-cert
    - xml-core
  when: ansible_distribution_release == "xenial"

- name: "Install Drush"
  get_url:
    url: "https://github.com/drush-ops/drush/releases/download/{{ DRUSH_VERSION }}/drush.phar"
    dest: "/usr/local/bin/drush"
    mode: "u=rwx,g=rx,o=rx"

- name: Install Drupal deps
  apt:
    pkg: "{{ item }}"
    state: present
  with_items:
    - php5-gd
    - php5-dev
    - php5-xsl
    - php-soap
    - php5-curl
    - php5-imagick
  when: ansible_distribution_release == "trusty"

- name: Install Drupal deps
  apt:
    pkg: "{{ item }}"
    state: present
  with_items:
    - php7.0-gd
    - php7.0-dev
    - php7.0-xsl
    - php7.0-soap
    - php7.0-curl
    - php-imagick
    - php7.0-mbstring
  when: ansible_distribution_release == "xenial"

- name: Install Drupal deps
  apt:
    pkg: "{{ item }}"
    state: present
  with_items:
    - imagemagick
    - lame
    - libimage-exiftool-perl
    - bibutils
    - poppler-utils
    - zip
    - unzip
    - tar
    - imagemagick
    - poppler-utils
    - ghostscript
    - sendmail

- name: Download Drupal
  shell: "drush dl -y drupal-{{ DRUPAL_VERSION }} --drupal-project-rename={{ DRUPAL_PROJECT_RENAME }}"
  args:
    executable: /bin/bash
    chdir: /var/www/
    creates: "{{ DRUPAL_HOME }}/index.php"

- name: Enable rewrite module
  apache2_module:
    state: present
    name: "{{ item }}"
  with_items:
    - rewrite
    - xml2enc
  register: apache_modules

- name: Increase the maximum file size settings in Drupal
  blockinfile:
    dest: /etc/php5/apache2/conf.d/20-islandora.ini
    create: yes
    block: |
      upload_max_filesize = 2048M
      post_max_size = 2048M
      memory_limit = 256M
  when: ansible_distribution_release == "trusty"

- name: Increase the maximum file size settings in Drupal
  blockinfile:
    dest: /etc/php/7.0/apache2/conf.d/20-islandora.ini
    create: yes
    block: |
      upload_max_filesize = 2048M
      post_max_size = 2048M
      memory_limit = 256M
  when: ansible_distribution_release == "xenial"

- name: Reload apache
  service:
    name: apache2
    state: reloaded
  when: apache_modules.changed

- name: Install Drupal
  shell: "{{ item }}"
  with_items:
    - "drush si -y --db-url=mysql://{{ MYSQL_ROOT_USER }}:{{ MYSQL_ROOT_PASSWORD }}@{{ MYSQL_HOSTNAME }}/{{ DRUPAL_DATABASE_NAME }} --site-name='{{ DRUPAL_SITE_NAME }}' --site-mail='{{ DRUPAL_SITE_MAIL }}' --account-mail='{{ DRUPAL_ACCOUNT_MAIL }}'"
  args:
    executable: /bin/bash
    chdir: "{{ DRUPAL_HOME }}/"
    creates: "{{ DRUPAL_HOME }}/sites/default/settings.php"
  register: drupal_install

  ### Change admin's password
- name: Add admin user to drupal
  shell: "{{ item }}"
  with_items:
    - "drush user-password {{ DRUPAL_SITE_ADMIN }} --password={{ DRUPAL_SITE_ADMIN_PASSWORD }}"
  args:
    executable: /bin/bash
    chdir: "{{ DRUPAL_HOME }}/"
  when: drupal_install.changed

- block:
      ### Converts MySQL UTF8 databases into UTF8MB4
    - name: "UTF8MB4 Convert"
      shell: "{{ item }}"
      with_items:
        - drush @none dl -y utf8mb4_convert-7.x
        - drush vset maintenance_mode 1
        - drush -y utf8mb4-convert-databases
        - drush vset maintenance_mode 0
      args:
        executable: /bin/bash
        chdir: "{{ DRUPAL_HOME }}/sites/all/modules"
    - name: "Enable collation in settings.php"
      lineinfile:
        dest: "{{ DRUPAL_HOME }}/sites/default/settings.php"
        regexp: "      'collation'"
        insertafter: "      'password'"
        line: "      'collation' => 'utf8mb4_general_ci',"
    - name: "Enable charset in settings.php"
      lineinfile:
        dest: "{{ DRUPAL_HOME }}/sites/default/settings.php"
        regexp: "      'charset'"
        insertafter: "      'password'"
        line: "      'charset' => 'utf8mb4',"
  when: 
    - drupal_install.changed

- name: "Enable proxy module"
  file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
  with_items:
    - { src: "/etc/apache2/mods-available/proxy.load", dest: "/etc/apache2/mods-enabled/proxy.load" }
    - { src: "/etc/apache2/mods-available/proxy_http.load", dest: "/etc/apache2/mods-enabled/proxy_http.load" }
    - { src: "/etc/apache2/mods-available/proxy_html.load", dest: "/etc/apache2/mods-enabled/proxy_html.load" }
    - { src: "/etc/apache2/mods-available/headers.load", dest: "/etc/apache2/mods-enabled/headers.load" }

- name: shellcheck disable=SC2162
  blockinfile:
    dest: "{{ APACHE_CONFIG_FILE }}"
    insertbefore: "^</VirtualHost>"
    block: |
        ServerAlias {{ APACHE_SERVER_ALIAS }}

        <Directory {{ DRUPAL_HOME }}>
          Options Indexes FollowSymLinks
          AllowOverride All
          Require all granted
        </Directory>

        ProxyRequests Off
        ProxyPreserveHost On

        <Proxy *>
          Order deny,allow
          Allow from all
        </Proxy>

        ProxyPass /fedora/get http://{{ FEDORA_HOSTNAME }}:8080/fedora/get
        ProxyPassReverse /fedora/get http://{{ FEDORA_HOSTNAME }}:8080/fedora/get
        ProxyPass /fedora/services http://{{ FEDORA_HOSTNAME }}:8080/fedora/services
        ProxyPassReverse /fedora/services http://{{ FEDORA_HOSTNAME }}:8080/fedora/services
        ProxyPass /fedora/describe http://{{ FEDORA_HOSTNAME }}:8080/fedora/describe
        ProxyPassReverse /fedora/describe http://{{ FEDORA_HOSTNAME }}:8080/fedora/describe
        ProxyPass /fedora/risearch http://{{ FEDORA_HOSTNAME }}:8080/fedora/risearch
        ProxyPassReverse /fedora/risearch http://{{ FEDORA_HOSTNAME }}:8080/fedora/risearch
        ProxyPass /adore-djatoka http://{{ DJATOKA_HOSTNAME }}:8080/adore-djatoka
        ProxyPassReverse /adore-djatoka http://{{ DJATOKA_HOSTNAME }}:8080/adore-djatoka
        
- name: Torch the default index.html
  file: 
    path: /var/www/html/index.html
    state: absent

### milestone 4 - Installing The "Tuque" library
- name: Download Tuque
  git:
    repo: "https://github.com/Islandora/{{ item }}"
    dest: "{{ DRUPAL_HOME }}/sites/all/libraries/{{ item }}"
    version: "{{ TUQUE_VERSION }}"
    update: no
  with_items:
    - tuque

- name: Disable certificate validation in the Islandora module
  replace:
    regexp: 'verifyPeer = TRUE'
    replace: 'verifyPeer = FALSE'
    dest: "{{ DRUPAL_HOME }}/sites/all/libraries/tuque/HttpConnection.php"

- name: Set git filemode false for git
  replace:
    regexp: "filemode = true"
    replace: "filemode = false"
    dest: "{{ DRUPAL_HOME }}/sites/all/libraries/{{ item }}/.git/config"
  with_items:
    - tuque

### milestone 5 - Installing the Islandora Essential Modules
- name: Install the ImageMagick Drupal module 
  shell: "{{ item }}"
  with_items:
    - "wget -O /tmp/imagemagick.zip http://ftp.drupal.org/files/projects/imagemagick-7.x-1.0.zip"
    - "unzip /tmp/imagemagick.zip"
  args:
    executable: /bin/bash
    chdir: "{{ DRUPAL_HOME }}/sites/all/modules"
    creates: "{{ DRUPAL_HOME }}/sites/all/modules/imagemagick/imagemagick.module"

- name: Download the minimal modules
  git:
    repo: "https://github.com/Islandora/{{ item }}"
    dest: "{{ DRUPAL_HOME }}/sites/all/modules/{{ item }}"
    version: "{{ ISLANDORA_VERSION }}"
    update: no
  with_items:
    - "{{ MINIMAL_MODULES }}"
  register: islandora_modules

- name: Set git filemode false for git
  replace:
    regexp: "filemode = true"
    replace: "filemode = false"
    dest: "{{ DRUPAL_HOME }}/sites/all/modules/{{ item }}/.git/config"
  with_items:
    - "{{ MINIMAL_MODULES }}"

### All Islandora Foundation modules
- block:
    ### Install FITS
    - name: Create {{ FITS_HOME }} folder
      file:
        path: "{{ FITS_HOME }}"
        state: directory

    - name: "Download FITS"
      get_url:
        url: "http://projects.iq.harvard.edu/files/fits/files/fits-{{ FITS_VERSION }}.zip"
        dest: "/tmp/fits-{{ FITS_VERSION }}.zip"
        timeout: 120

    - name: Unzip FITS
      unarchive:
        src: "/tmp/fits-{{ FITS_VERSION }}.zip"
        dest: "{{ FITS_HOME }}"
        creates: "{{ FITS_HOME }}/fits-{{ FITS_VERSION }}/fits.sh"

    - name: "Setting some permissions"
      file:
        path: "{{ FITS_HOME }}/fits-{{ FITS_VERSION }}/{{ item }}"
        mode: "u=rwx,g=rx,o=rx"
      with_items:
        - fits.sh
        - fits-env.sh

    - name: Install the Openseadragon library
      shell: "{{ item }}"
      with_items:
        - "wget -O /tmp/openseadragon-bin-0.9.129.zip http://openseadragon.github.io/releases/openseadragon-bin-0.9.129.zip"
        - "unzip /tmp/openseadragon-bin-0.9.129.zip"
        - "mv openseadragon-bin-0.9.129 openseadragon"
      args:
        executable: /bin/bash
        chdir: "{{ DRUPAL_HOME }}/sites/all/libraries"
        creates: "{{ DRUPAL_HOME }}/sites/all/libraries/openseadragon/openseadragon.js"

    - name: Install FFmpeg
      apt:
        pkg: ffmpeg
        state: present
        update_cache: true

    - name: Install Sleuthkit
      shell: "{{ item }}"
      with_items:
        - apt-get install -y libafflib-dev afflib-tools libewf-dev ewf-tools
        - git clone https://github.com/sleuthkit/sleuthkit.git
        - cd sleuthkit && git checkout 5f8a005475c3ea3e6547c3276aea381e9804c005 && ./bootstrap && ./configure && make && make install && ldconfig
      args:
        executable: /bin/bash
        chdir: "/tmp"
        creates: "/usr/local/bin/fiwalk"

    - name: Install warctools
      shell: "{{ item }}"
      with_items:
        - apt-get install -y python-setuptools python-unittest2
        - git clone https://github.com/internetarchive/warctools.git
        - cd warctools && ./setup.py build && ./setup.py install
      args:
        executable: /bin/bash
        chdir: "/tmp"
        creates: "/usr/local/bin/warcfilter"

    - name: Install ffmpeg2theora
      apt:
        pkg: "{{ item }}"
        state: present
        update_cache: true
        cache_valid_time: 86400
      with_items:
        - ffmpeg2theora

    - name: Install Tesseract
      apt:
        pkg: "{{ item }}"
        state: present
        update_cache: true
        cache_valid_time: 86400
      with_items:
        - tesseract-ocr
        - tesseract-ocr-eng
        - tesseract-ocr-fra

    # Download the modules
    - name: Download more modules
      git:
        repo: "https://github.com/Islandora/{{ item }}"
        dest: "{{ DRUPAL_HOME }}/sites/all/modules/{{ item }}"
        version: "{{ ISLANDORA_VERSION }}"
        update: no
      with_items:
      - "{{ COMPLETE_MODULES }}"

    - name: Set git filemode false for git
      replace:
        regexp: "filemode = true"
        replace: "filemode = false"
        dest: "{{ DRUPAL_HOME }}/sites/all/modules/{{ item }}/.git/config"
      with_items:
        - "{{ COMPLETE_MODULES }}"

    # Download the libraries
    - name: Download Cite-Proc
      git:
        repo: "https://github.com/Islandora/citeproc-php"
        dest: "{{ DRUPAL_HOME }}/sites/all/libraries/citeproc-php"
        update: no

    - name: Download BagItPHP
      git:
        repo: "https://github.com/scholarslab/BagItPHP"
        dest: "{{ DRUPAL_HOME }}/sites/all/libraries/BagItPHP"
        update: no

    - name: Set git filemode false for git
      replace:
        regexp: "filemode = true"
        replace: "filemode = false"
        dest: "{{ DRUPAL_HOME }}/sites/all/libraries/{{ item }}/.git/config"
      with_items:
        - BagItPHP
        - citeproc-php

  when: INSTALL_COMPLETE_MODULE == "true"

- name: Fix some MySQL problems with the xml_form_builder module under Ubuntu 16 LTS
  replace:
    regexp: "'not NULL' => TRUE"
    replace: "'not null' => True"
    dest: "{{ DRUPAL_HOME }}/sites/all/modules/islandora_xml_forms/builder/xml_form_builder.install"
  when: ansible_distribution_release == "xenial"

- name: "Enable the modules"
  shell: "{{ item }}"
  with_items:
    ### Enable Testing module to run some of the Islandora tests
    - drush -y -u 1 en simpletest
    - drush dl devel imagemagick ctools jquery_update pathauto xmlsitemap views variable token libraries datepicker date
    - drush -y en devel imagemagick ctools jquery_update pathauto xmlsitemap views variable token libraries datepicker_views
    - drush dl coder
    - drush -y en coder
    ### milestone 5 - Installing the Islandora Essential Modules
    - drush -y -u 1 en islandora
    - drush -y -u 1 en islandora_basic_collection
    - drush -y -u 1 en islandora_basic_image
    - drush -y -u 1 en islandora_pdf
    - drush eval "variable_set('islandora_basic_collection_display_backend', 'islandora_basic_collection_sparql_query_backend')"
    - drush eval "variable_set('islandora_pdf_allow_text_upload', '1')"
    - drush eval "variable_set('islandora_pdf_create_fulltext', '1')"
    - drush eval "variable_set('islandora_pdf_create_pdfa', '1')"
    ### milestone 6 - Installing Solr and GSearch
    - drush -y -u 1 en islandora_solr islandora_solr_metadata islandora_solr_facet_pages islandora_solr_views islandora_solr_config
    - drush -y -u 1 en xml_form_builder xml_form_elements xml_forms imagemagick_advanced views_ui
    - drush eval "variable_set('islandora_metadata_display', 'islandora_solr_metadata')"
    - drush eval "variable_set('islandora_lossless', '1')"
    ### Islandora Viewers
    - drush -y -u 1 en islandora_pdfjs
    - drush -v pdfjs-plugin
    - drush eval "variable_set('islandora_pdf_viewers', array('name' => array('none' => 'none', 'islandora_pdfjs' => 'islandora_pdfjs'), 'default' => 'islandora_pdfjs'))"
    ### drush_extras to configure blocks
    ### http://drupal.stackexchange.com/a/3661
    - drush dl drush_extras-7
    - drush block-configure --module=search --delta=form --region=-1 --weight=5
    - drush block-configure --module=islandora_solr --delta=simple --region=sidebar_first --weight=-13
    ### Apply some variables.
    - drush variable-set date_default_timezone "{{ DRUPAL_TIMEZONE }}"
    ### Apply any database updates required (as with running update.php).
    - drush -y updatedb
    - drush -y core-cron
  args:
    executable: /bin/bash
    chdir: "{{ DRUPAL_HOME }}/sites/all/modules"
  # when: islandora_modules.changed or drupal_install.changed

### All Islandora Foundation modules
- block:
    - name: "Enable the modules"
      shell: "{{ item }}"
      with_items:
        ### Installing all Islandora Foundation modules
        - drush dl -y entity
        - drush -y -u 1 en islandora_batch islandora_batch_report
        - drush eval "variable_set('islandora_batch_java', '/usr/bin/java')"
        - drush eval "variable_set('image_toolkit', 'imagemagick')"
        - drush eval "variable_set('imagemagick_convert', '/usr/bin/convert')"
        - drush -y -u 1 en islandora_large_image
        - drush eval "variable_set('islandora_use_kakadu', TRUE)"
        - drush -y -u 1 en islandora_paged_content
        - drush -y -u 1 en islandora_openseadragon
        - drush eval "variable_set('islandora_large_image_viewers', array('name' => array('none' => 'none', 'islandora_openseadragon' => 'islandora_openseadragon'), 'default' => 'islandora_openseadragon'))"
        - drush -y -u 1 en islandora_ocr
        - drush -y -u 1 en colorbox
        - drush colorbox-plugin
        - drush -y -u 1 en islandora_internet_archive_bookreader
        - drush -y -u 1 en islandora_book
        - drush eval "variable_set('islandora_book_viewers', array('name' => array('none' => 'none', 'islandora_internet_archive_bookreader' => 'islandora_internet_archive_bookreader'), 'default' => 'islandora_internet_archive_bookreader'))"
        - drush eval "variable_set('islandora_book_page_viewers', array('name' => array('none' => 'none', 'islandora_openseadragon' => 'islandora_openseadragon'), 'default' => 'islandora_openseadragon'))"
        - drush -y -u 1 en islandora_videojs
        - drush -v videojs-plugin
        - drush -y -u 1 en islandora_audio
        - drush eval "variable_set('islandora_audio_viewers', array('name' => array('none' => 'none', 'islandora_videojs' => 'islandora_videojs'), 'default' => 'islandora_videojs'))"
        - drush -y -u 1 en islandora_video
        - drush eval "variable_set('islandora_video_viewers', array('name' => array('none' => 'none', 'islandora_videojs' => 'islandora_videojs'), 'default' => 'islandora_videojs'))"
        - drush eval "variable_set('islandora_video_ffmpeg_path', '/usr/local/bin/ffmpeg')"
        - drush -y -u 1 en islandora_compound_object islandora_disk_image islandora_entities islandora_entities_csv_import islandora_newspaper islandora_web_archive
        - drush -y -u 1 en islandora_premis islandora_checksum islandora_checksum_checker
        - drush -y -u 1 en islandora_book_batch islandora_pathauto
        - drush dl -y jquery_update
        - drush -y -u 1 en jquery_update zip_importer islandora_bibliography islandora_compound_object islandora_google_scholar islandora_scholar_embargo citation_exporter doi_importer endnotexml_importer pmid_importer ris_importer
        - drush dl -y xmlsitemap datepicker date views_data_export
        - drush -y -u 1 en islandora_fits islandora_oai islandora_marcxml islandora_simple_workflow islandora_xacml_api islandora_xacml_editor islandora_bagit islandora_usage_stats islandora_form_fieldpanel islandora_altmetrics islandora_populator islandora_newspaper_batch
        ### Currently, islandora_xmlsitemap is causing some issue, so commenting it out for now...
        # - islandora_xmlsitemap
        ### Set variables for Islandora modules
        - drush eval "variable_set('islandora_audio_viewers', array('name' => array('none' => 'none', 'islandora_videojs' => 'islandora_videojs'), 'default' => 'islandora_videojs'))"
        - drush eval "variable_set('islandora_fits_executable_path', '{{ FITS_HOME }}/fits-{{ FITS_VERSION }}/fits.sh')"
        - drush eval "variable_set('islandora_lame_url', '/usr/bin/lame')"
        - drush eval "variable_set('islandora_video_viewers', array('name' => array('none' => 'none', 'islandora_videojs' => 'islandora_videojs'), 'default' => 'islandora_videojs'))"
        - drush eval "variable_set('islandora_video_ffmpeg_path', '/usr/local/bin/ffmpeg')"
        - drush eval "variable_set('islandora_book_viewers', array('name' => array('none' => 'none', 'islandora_internet_archive_bookreader' => 'islandora_internet_archive_bookreader'), 'default' => 'islandora_internet_archive_bookreader'))"
        - drush eval "variable_set('islandora_book_page_viewers', array('name' => array('none' => 'none', 'islandora_openseadragon' => 'islandora_openseadragon'), 'default' => 'islandora_openseadragon'))"
        - drush eval "variable_set('islandora_large_image_viewers', array('name' => array('none' => 'none', 'islandora_openseadragon' => 'islandora_openseadragon'), 'default' => 'islandora_openseadragon'))"
        - drush eval "variable_set('islandora_use_kakadu', TRUE)"
        - drush eval "variable_set('islandora_newspaper_issue_viewers', array('name' => array('none' => 'none', 'islandora_internet_archive_bookreader' => 'islandora_internet_archive_bookreader'), 'default' => 'islandora_internet_archive_bookreader'))"
        - drush eval "variable_set('islandora_newspaper_page_viewers', array('name' => array('none' => 'none', 'islandora_openseadragon' => 'islandora_openseadragon'), 'default' => 'islandora_openseadragon'))"
        - drush eval "variable_set('islandora_checksum_enable_checksum', TRUE)"
        - drush eval "variable_set('islandora_checksum_checksum_type', 'SHA-1')"
        - drush eval "variable_set('islandora_ocr_tesseract', '/usr/bin/tesseract')"
        - drush eval "variable_set('islandora_batch_java', '/usr/bin/java')"
        - drush eval "variable_set('image_toolkit', 'imagemagick')"
        - drush eval "variable_set('imagemagick_convert', '/usr/bin/convert')"
        ### Installing all Islandora Foundation module's required libraries
        - drush cache-clear drush
        - drush iabookreader-plugin
        - drush -y updatedb
        - drush -y core-cron
      args:
        executable: /bin/bash
        chdir: "{{ DRUPAL_HOME }}/sites/all/modules"
  when: INSTALL_COMPLETE_MODULE == "true"

- block:
    - name: Install uploadprogress
      pear:
        name: pecl/uploadprogress
        state: present

    - name: Configure
      lineinfile:
        insertafter: 'extension_dir = "ext"' 
        regexp: "extension=uploadprogress.so"
        line: "extension=uploadprogress.so"
        dest: /etc/php5/apache2/php.ini 
  when: ansible_distribution_release == "trusty"

- block:
    - name: Add uploadprogress Repo
      apt_repository: 
        repo: 'ppa:ondrej/php'

    - name: Install php-uploadprogress
      apt:
        pkg: php-uploadprogress
        state: present
        update_cache: true
  when: ansible_distribution_release == "xenial"

- name: Set Permissions
  file: 
    path: "{{ item }}"
    owner: www-data 
    group: www-data 
    recurse: yes
  with_items:
    - "{{ DRUPAL_HOME }}"

- name: Restart apache
  service:
    name: apache2
    state: restarted

- name: "Run Cron maintenance tasks"
  shell: "drush --root={{ DRUPAL_HOME }} -y -u 1 core-cron"
